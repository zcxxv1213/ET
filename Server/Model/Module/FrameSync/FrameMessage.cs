// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FrameMessage.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace ETModel {

  #region Messages
  public partial class OneFrameMessage : pb::IMessage {
    private static readonly pb::MessageParser<OneFrameMessage> _parser = new pb::MessageParser<OneFrameMessage>(() => new OneFrameMessage());
    public static pb::MessageParser<OneFrameMessage> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int op_;
    public int Op {
      get { return op_; }
      set {
        op_ = value;
      }
    }

    private pb::ByteString aMessage_ = pb::ByteString.Empty;
    public pb::ByteString AMessage {
      get { return aMessage_; }
      set {
        aMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Op != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Op);
      }
      if (AMessage.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(AMessage);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Op != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Op);
      }
      if (AMessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(AMessage);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      op_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Op = input.ReadInt32();
            break;
          }
          case 18: {
            AMessage = input.ReadBytes();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class FrameMessage : pb::IMessage {
    private static readonly pb::MessageParser<FrameMessage> _parser = new pb::MessageParser<FrameMessage>(() => new FrameMessage());
    public static pb::MessageParser<FrameMessage> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int frame_;
    public int Frame {
      get { return frame_; }
      set {
        frame_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ETModel.OneFrameMessage> _repeated_message_codec
        = pb::FieldCodec.ForMessage(18, global::ETModel.OneFrameMessage.Parser);
    private pbc::RepeatedField<global::ETModel.OneFrameMessage> message_ = new pbc::RepeatedField<global::ETModel.OneFrameMessage>();
    public pbc::RepeatedField<global::ETModel.OneFrameMessage> Message {
      get { return message_; }
      set { message_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Frame != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Frame);
      }
      message_.WriteTo(output, _repeated_message_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Frame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Frame);
      }
      size += message_.CalculateSize(_repeated_message_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      frame_ = 0;
      message_.Clear();
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Frame = input.ReadInt32();
            break;
          }
          case 18: {
            message_.AddEntriesFrom(input, _repeated_message_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class PeerInfo : pb::IMessage {
    private static readonly pb::MessageParser<PeerInfo> _parser = new pb::MessageParser<PeerInfo>(() => new PeerInfo());
    public static pb::MessageParser<PeerInfo> Parser { get { return _parser; } }

    private string playerName_ = "";
    public string PlayerName {
      get { return playerName_; }
      set {
        playerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int inputAssignment_;
    public int InputAssignment {
      get { return inputAssignment_; }
      set {
        inputAssignment_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PlayerName);
      }
      if (InputAssignment != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(InputAssignment);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (PlayerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerName);
      }
      if (InputAssignment != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InputAssignment);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      playerName_ = "";
      inputAssignment_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            PlayerName = input.ReadString();
            break;
          }
          case 16: {
            InputAssignment = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class MoveInfo : pb::IMessage {
    private static readonly pb::MessageParser<MoveInfo> _parser = new pb::MessageParser<MoveInfo>(() => new MoveInfo());
    public static pb::MessageParser<MoveInfo> Parser { get { return _parser; } }

    private int posX_;
    public int PosX {
      get { return posX_; }
      set {
        posX_ = value;
      }
    }

    private int posY_;
    public int PosY {
      get { return posY_; }
      set {
        posY_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (PosX != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PosX);
      }
      if (PosY != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PosY);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (PosX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PosX);
      }
      if (PosY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PosY);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      posX_ = 0;
      posY_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PosX = input.ReadInt32();
            break;
          }
          case 16: {
            PosY = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class UnitSnatshot : pb::IMessage {
    private static readonly pb::MessageParser<UnitSnatshot> _parser = new pb::MessageParser<UnitSnatshot>(() => new UnitSnatshot());
    public static pb::MessageParser<UnitSnatshot> Parser { get { return _parser; } }

    private long id_;
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    private global::ETModel.MoveInfo moveComponentBytes_;
    public global::ETModel.MoveInfo MoveComponentBytes {
      get { return moveComponentBytes_; }
      set {
        moveComponentBytes_ = value;
      }
    }

    private int playerIndex_;
    public int PlayerIndex {
      get { return playerIndex_; }
      set {
        playerIndex_ = value;
      }
    }

    private global::ETModel.PeerInfo info_;
    public global::ETModel.PeerInfo Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (moveComponentBytes_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(MoveComponentBytes);
      }
      if (PlayerIndex != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PlayerIndex);
      }
      if (info_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Info);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (moveComponentBytes_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MoveComponentBytes);
      }
      if (PlayerIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerIndex);
      }
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      id_ = 0;
      playerIndex_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 18: {
            if (moveComponentBytes_ == null) {
              moveComponentBytes_ = new global::ETModel.MoveInfo();
            }
            input.ReadMessage(moveComponentBytes_);
            break;
          }
          case 24: {
            PlayerIndex = input.ReadInt32();
            break;
          }
          case 34: {
            if (info_ == null) {
              info_ = new global::ETModel.PeerInfo();
            }
            input.ReadMessage(info_);
            break;
          }
        }
      }
    }

  }

  public partial class UnitSnapshotMsg : pb::IMessage {
    private static readonly pb::MessageParser<UnitSnapshotMsg> _parser = new pb::MessageParser<UnitSnapshotMsg>(() => new UnitSnapshotMsg());
    public static pb::MessageParser<UnitSnapshotMsg> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ETModel.UnitSnatshot> _repeated_units_codec
        = pb::FieldCodec.ForMessage(10, global::ETModel.UnitSnatshot.Parser);
    private pbc::RepeatedField<global::ETModel.UnitSnatshot> units_ = new pbc::RepeatedField<global::ETModel.UnitSnatshot>();
    public pbc::RepeatedField<global::ETModel.UnitSnatshot> Units {
      get { return units_; }
      set { units_ = value; }
    }

    private int frame_;
    public int Frame {
      get { return frame_; }
      set {
        frame_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      units_.WriteTo(output, _repeated_units_codec);
      if (Frame != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Frame);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      size += units_.CalculateSize(_repeated_units_codec);
      if (Frame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Frame);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      units_.Clear();
      frame_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            units_.AddEntriesFrom(input, _repeated_units_codec);
            break;
          }
          case 16: {
            Frame = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class ClientInitComplete : pb::IMessage {
    private static readonly pb::MessageParser<ClientInitComplete> _parser = new pb::MessageParser<ClientInitComplete>(() => new ClientInitComplete());
    public static pb::MessageParser<ClientInitComplete> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class SnapShotMessage : pb::IMessage {
    private static readonly pb::MessageParser<SnapShotMessage> _parser = new pb::MessageParser<SnapShotMessage>(() => new SnapShotMessage());
    public static pb::MessageParser<SnapShotMessage> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ETModel.UnitSnapshotMsg> _repeated_unitMsg_codec
        = pb::FieldCodec.ForMessage(10, global::ETModel.UnitSnapshotMsg.Parser);
    private pbc::RepeatedField<global::ETModel.UnitSnapshotMsg> unitMsg_ = new pbc::RepeatedField<global::ETModel.UnitSnapshotMsg>();
    public pbc::RepeatedField<global::ETModel.UnitSnapshotMsg> UnitMsg {
      get { return unitMsg_; }
      set { unitMsg_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      unitMsg_.WriteTo(output, _repeated_unitMsg_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      size += unitMsg_.CalculateSize(_repeated_unitMsg_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      unitMsg_.Clear();
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            unitMsg_.AddEntriesFrom(input, _repeated_unitMsg_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class LocalNCFAndJLE : pb::IMessage {
    private static readonly pb::MessageParser<LocalNCFAndJLE> _parser = new pb::MessageParser<LocalNCFAndJLE>(() => new LocalNCFAndJLE());
    public static pb::MessageParser<LocalNCFAndJLE> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int newestConsistentFrame_;
    public int NewestConsistentFrame {
      get { return newestConsistentFrame_; }
      set {
        newestConsistentFrame_ = value;
      }
    }

    private int latestJoinLeaveEvent_;
    public int LatestJoinLeaveEvent {
      get { return latestJoinLeaveEvent_; }
      set {
        latestJoinLeaveEvent_ = value;
      }
    }

    private uint nCFSnapshot_;
    /// <summary>
    ///int32 CurrentHostId = 3;
    /// </summary>
    public uint NCFSnapshot {
      get { return nCFSnapshot_; }
      set {
        nCFSnapshot_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (NewestConsistentFrame != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(NewestConsistentFrame);
      }
      if (LatestJoinLeaveEvent != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(LatestJoinLeaveEvent);
      }
      if (NCFSnapshot != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(NCFSnapshot);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (NewestConsistentFrame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NewestConsistentFrame);
      }
      if (LatestJoinLeaveEvent != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LatestJoinLeaveEvent);
      }
      if (NCFSnapshot != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NCFSnapshot);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      newestConsistentFrame_ = 0;
      latestJoinLeaveEvent_ = 0;
      nCFSnapshot_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            NewestConsistentFrame = input.ReadInt32();
            break;
          }
          case 16: {
            LatestJoinLeaveEvent = input.ReadInt32();
            break;
          }
          case 24: {
            NCFSnapshot = input.ReadUInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class JoinEvent : pb::IMessage {
    private static readonly pb::MessageParser<JoinEvent> _parser = new pb::MessageParser<JoinEvent>(() => new JoinEvent());
    public static pb::MessageParser<JoinEvent> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ETModel.JoinLeaveEvent> _repeated_events_codec
        = pb::FieldCodec.ForMessage(10, global::ETModel.JoinLeaveEvent.Parser);
    private pbc::RepeatedField<global::ETModel.JoinLeaveEvent> events_ = new pbc::RepeatedField<global::ETModel.JoinLeaveEvent>();
    public pbc::RepeatedField<global::ETModel.JoinLeaveEvent> Events {
      get { return events_; }
      set { events_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      events_.WriteTo(output, _repeated_events_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      size += events_.CalculateSize(_repeated_events_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      events_.Clear();
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            events_.AddEntriesFrom(input, _repeated_events_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class JoinLeaveEvent : pb::IMessage {
    private static readonly pb::MessageParser<JoinLeaveEvent> _parser = new pb::MessageParser<JoinLeaveEvent>(() => new JoinLeaveEvent());
    public static pb::MessageParser<JoinLeaveEvent> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int eventId_;
    public int EventId {
      get { return eventId_; }
      set {
        eventId_ = value;
      }
    }

    private int consistentFrame_;
    public int ConsistentFrame {
      get { return consistentFrame_; }
      set {
        consistentFrame_ = value;
      }
    }

    private uint frameSubConsistemtFrame_;
    public uint FrameSubConsistemtFrame {
      get { return frameSubConsistemtFrame_; }
      set {
        frameSubConsistemtFrame_ = value;
      }
    }

    private int inputIndex_;
    public int InputIndex {
      get { return inputIndex_; }
      set {
        inputIndex_ = value;
      }
    }

    private int ifJoiningPlayerName_;
    public int IfJoiningPlayerName {
      get { return ifJoiningPlayerName_; }
      set {
        ifJoiningPlayerName_ = value;
      }
    }

    private string joiningPlayerName_ = "";
    public string JoiningPlayerName {
      get { return joiningPlayerName_; }
      set {
        joiningPlayerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private pb::ByteString joiningPlayerData_ = pb::ByteString.Empty;
    public pb::ByteString JoiningPlayerData {
      get { return joiningPlayerData_; }
      set {
        joiningPlayerData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (EventId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(EventId);
      }
      if (ConsistentFrame != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ConsistentFrame);
      }
      if (FrameSubConsistemtFrame != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(FrameSubConsistemtFrame);
      }
      if (InputIndex != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(InputIndex);
      }
      if (IfJoiningPlayerName != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(IfJoiningPlayerName);
      }
      if (JoiningPlayerName.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(JoiningPlayerName);
      }
      if (JoiningPlayerData.Length != 0) {
        output.WriteRawTag(58);
        output.WriteBytes(JoiningPlayerData);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (EventId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EventId);
      }
      if (ConsistentFrame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConsistentFrame);
      }
      if (FrameSubConsistemtFrame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FrameSubConsistemtFrame);
      }
      if (InputIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InputIndex);
      }
      if (IfJoiningPlayerName != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IfJoiningPlayerName);
      }
      if (JoiningPlayerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(JoiningPlayerName);
      }
      if (JoiningPlayerData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(JoiningPlayerData);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      eventId_ = 0;
      consistentFrame_ = 0;
      frameSubConsistemtFrame_ = 0;
      inputIndex_ = 0;
      ifJoiningPlayerName_ = 0;
      joiningPlayerName_ = "";
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            EventId = input.ReadInt32();
            break;
          }
          case 16: {
            ConsistentFrame = input.ReadInt32();
            break;
          }
          case 24: {
            FrameSubConsistemtFrame = input.ReadUInt32();
            break;
          }
          case 32: {
            InputIndex = input.ReadInt32();
            break;
          }
          case 40: {
            IfJoiningPlayerName = input.ReadInt32();
            break;
          }
          case 50: {
            JoiningPlayerName = input.ReadString();
            break;
          }
          case 58: {
            JoiningPlayerData = input.ReadBytes();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class OnlineState : pb::IMessage {
    private static readonly pb::MessageParser<OnlineState> _parser = new pb::MessageParser<OnlineState>(() => new OnlineState());
    public static pb::MessageParser<OnlineState> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int lastJoinFrame_;
    public int LastJoinFrame {
      get { return lastJoinFrame_; }
      set {
        lastJoinFrame_ = value;
      }
    }

    private static readonly pb::FieldCodec<int> _repeated_consistentFrame_codec
        = pb::FieldCodec.ForInt32(18);
    private pbc::RepeatedField<int> consistentFrame_ = new pbc::RepeatedField<int>();
    public pbc::RepeatedField<int> ConsistentFrame {
      get { return consistentFrame_; }
      set { consistentFrame_ = value; }
    }

    private static readonly pb::FieldCodec<string> _repeated_joinPlayerName_codec
        = pb::FieldCodec.ForString(26);
    private pbc::RepeatedField<string> joinPlayerName_ = new pbc::RepeatedField<string>();
    public pbc::RepeatedField<string> JoinPlayerName {
      get { return joinPlayerName_; }
      set { joinPlayerName_ = value; }
    }

    private static readonly pb::FieldCodec<pb::ByteString> _repeated_joinPlayerData_codec
        = pb::FieldCodec.ForBytes(34);
    private pbc::RepeatedField<pb::ByteString> joinPlayerData_ = new pbc::RepeatedField<pb::ByteString>();
    public pbc::RepeatedField<pb::ByteString> JoinPlayerData {
      get { return joinPlayerData_; }
      set { joinPlayerData_ = value; }
    }

    private int terminator_;
    public int Terminator {
      get { return terminator_; }
      set {
        terminator_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (LastJoinFrame != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(LastJoinFrame);
      }
      consistentFrame_.WriteTo(output, _repeated_consistentFrame_codec);
      joinPlayerName_.WriteTo(output, _repeated_joinPlayerName_codec);
      joinPlayerData_.WriteTo(output, _repeated_joinPlayerData_codec);
      if (Terminator != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Terminator);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (LastJoinFrame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LastJoinFrame);
      }
      size += consistentFrame_.CalculateSize(_repeated_consistentFrame_codec);
      size += joinPlayerName_.CalculateSize(_repeated_joinPlayerName_codec);
      size += joinPlayerData_.CalculateSize(_repeated_joinPlayerData_codec);
      if (Terminator != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Terminator);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      lastJoinFrame_ = 0;
      consistentFrame_.Clear();
      joinPlayerName_.Clear();
      joinPlayerData_.Clear();
      terminator_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            LastJoinFrame = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            consistentFrame_.AddEntriesFrom(input, _repeated_consistentFrame_codec);
            break;
          }
          case 26: {
            joinPlayerName_.AddEntriesFrom(input, _repeated_joinPlayerName_codec);
            break;
          }
          case 34: {
            joinPlayerData_.AddEntriesFrom(input, _repeated_joinPlayerData_codec);
            break;
          }
          case 40: {
            Terminator = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class InputHeader : pb::IMessage {
    private static readonly pb::MessageParser<InputHeader> _parser = new pb::MessageParser<InputHeader>(() => new InputHeader());
    public static pb::MessageParser<InputHeader> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private pb::ByteString inputFormat_ = pb::ByteString.Empty;
    public pb::ByteString InputFormat {
      get { return inputFormat_; }
      set {
        inputFormat_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int startFrame_;
    public int StartFrame {
      get { return startFrame_; }
      set {
        startFrame_ = value;
      }
    }

    private int inputAssignment_;
    public int InputAssignment {
      get { return inputAssignment_; }
      set {
        inputAssignment_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (InputFormat.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(InputFormat);
      }
      if (StartFrame != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(StartFrame);
      }
      if (InputAssignment != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(InputAssignment);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (InputFormat.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(InputFormat);
      }
      if (StartFrame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StartFrame);
      }
      if (InputAssignment != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InputAssignment);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      startFrame_ = 0;
      inputAssignment_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            InputFormat = input.ReadBytes();
            break;
          }
          case 16: {
            StartFrame = input.ReadInt32();
            break;
          }
          case 24: {
            InputAssignment = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class InputPredictionWarmValues : pb::IMessage {
    private static readonly pb::MessageParser<InputPredictionWarmValues> _parser = new pb::MessageParser<InputPredictionWarmValues>(() => new InputPredictionWarmValues());
    public static pb::MessageParser<InputPredictionWarmValues> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private static readonly pb::FieldCodec<pb::ByteString> _repeated_inputstate_codec
        = pb::FieldCodec.ForBytes(10);
    private pbc::RepeatedField<pb::ByteString> inputstate_ = new pbc::RepeatedField<pb::ByteString>();
    public pbc::RepeatedField<pb::ByteString> Inputstate {
      get { return inputstate_; }
      set { inputstate_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      inputstate_.WriteTo(output, _repeated_inputstate_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      size += inputstate_.CalculateSize(_repeated_inputstate_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      inputstate_.Clear();
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            inputstate_.AddEntriesFrom(input, _repeated_inputstate_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class C2SOnlyInputState : pb::IMessage {
    private static readonly pb::MessageParser<C2SOnlyInputState> _parser = new pb::MessageParser<C2SOnlyInputState>(() => new C2SOnlyInputState());
    public static pb::MessageParser<C2SOnlyInputState> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int inputstate_;
    public int Inputstate {
      get { return inputstate_; }
      set {
        inputstate_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Inputstate != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Inputstate);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Inputstate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Inputstate);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      inputstate_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Inputstate = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class MessageInputRLE : pb::IMessage {
    private static readonly pb::MessageParser<MessageInputRLE> _parser = new pb::MessageParser<MessageInputRLE>(() => new MessageInputRLE());
    public static pb::MessageParser<MessageInputRLE> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<int> _repeated_count_codec
        = pb::FieldCodec.ForInt32(10);
    private pbc::RepeatedField<int> count_ = new pbc::RepeatedField<int>();
    public pbc::RepeatedField<int> Count {
      get { return count_; }
      set { count_ = value; }
    }

    private static readonly pb::FieldCodec<int> _repeated_inputstate_codec
        = pb::FieldCodec.ForInt32(18);
    private pbc::RepeatedField<int> inputstate_ = new pbc::RepeatedField<int>();
    public pbc::RepeatedField<int> Inputstate {
      get { return inputstate_; }
      set { inputstate_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      count_.WriteTo(output, _repeated_count_codec);
      inputstate_.WriteTo(output, _repeated_inputstate_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += count_.CalculateSize(_repeated_count_codec);
      size += inputstate_.CalculateSize(_repeated_inputstate_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      count_.Clear();
      inputstate_.Clear();
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            count_.AddEntriesFrom(input, _repeated_count_codec);
            break;
          }
          case 18:
          case 16: {
            inputstate_.AddEntriesFrom(input, _repeated_inputstate_codec);
            break;
          }
        }
      }
    }

  }

  public partial class MessageInputCoalesced : pb::IMessage {
    private static readonly pb::MessageParser<MessageInputCoalesced> _parser = new pb::MessageParser<MessageInputCoalesced>(() => new MessageInputCoalesced());
    public static pb::MessageParser<MessageInputCoalesced> Parser { get { return _parser; } }

    private int firstInputCount_;
    public int FirstInputCount {
      get { return firstInputCount_; }
      set {
        firstInputCount_ = value;
      }
    }

    private int firstInput_;
    public int FirstInput {
      get { return firstInput_; }
      set {
        firstInput_ = value;
      }
    }

    private int lastInput_;
    public int LastInput {
      get { return lastInput_; }
      set {
        lastInput_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (FirstInputCount != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FirstInputCount);
      }
      if (FirstInput != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FirstInput);
      }
      if (LastInput != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(LastInput);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (FirstInputCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FirstInputCount);
      }
      if (FirstInput != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FirstInput);
      }
      if (LastInput != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LastInput);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      firstInputCount_ = 0;
      firstInput_ = 0;
      lastInput_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FirstInputCount = input.ReadInt32();
            break;
          }
          case 16: {
            FirstInput = input.ReadInt32();
            break;
          }
          case 24: {
            LastInput = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class MessageReceiveRemoteNCFAndJLE : pb::IMessage {
    private static readonly pb::MessageParser<MessageReceiveRemoteNCFAndJLE> _parser = new pb::MessageParser<MessageReceiveRemoteNCFAndJLE>(() => new MessageReceiveRemoteNCFAndJLE());
    public static pb::MessageParser<MessageReceiveRemoteNCFAndJLE> Parser { get { return _parser; } }

    private int receivedNCF_;
    public int ReceivedNCF {
      get { return receivedNCF_; }
      set {
        receivedNCF_ = value;
      }
    }

    private int receivedJLE_;
    public int ReceivedJLE {
      get { return receivedJLE_; }
      set {
        receivedJLE_ = value;
      }
    }

    private int receivedHash_;
    public int ReceivedHash {
      get { return receivedHash_; }
      set {
        receivedHash_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ReceivedNCF != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ReceivedNCF);
      }
      if (ReceivedJLE != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ReceivedJLE);
      }
      if (ReceivedHash != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ReceivedHash);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ReceivedNCF != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReceivedNCF);
      }
      if (ReceivedJLE != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReceivedJLE);
      }
      if (ReceivedHash != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReceivedHash);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      receivedNCF_ = 0;
      receivedJLE_ = 0;
      receivedHash_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReceivedNCF = input.ReadInt32();
            break;
          }
          case 16: {
            ReceivedJLE = input.ReadInt32();
            break;
          }
          case 24: {
            ReceivedHash = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class MessageReceiveDesyncDebug : pb::IMessage {
    private static readonly pb::MessageParser<MessageReceiveDesyncDebug> _parser = new pb::MessageParser<MessageReceiveDesyncDebug>(() => new MessageReceiveDesyncDebug());
    public static pb::MessageParser<MessageReceiveDesyncDebug> Parser { get { return _parser; } }

    private int receivedJLE_;
    public int ReceivedJLE {
      get { return receivedJLE_; }
      set {
        receivedJLE_ = value;
      }
    }

    private int receivedStartFrame_;
    public int ReceivedStartFrame {
      get { return receivedStartFrame_; }
      set {
        receivedStartFrame_ = value;
      }
    }

    private int receivedCount_;
    public int ReceivedCount {
      get { return receivedCount_; }
      set {
        receivedCount_ = value;
      }
    }

    private static readonly pb::FieldCodec<pb::ByteString> _repeated_receivedSnapshots_codec
        = pb::FieldCodec.ForBytes(34);
    private pbc::RepeatedField<pb::ByteString> receivedSnapshots_ = new pbc::RepeatedField<pb::ByteString>();
    public pbc::RepeatedField<pb::ByteString> ReceivedSnapshots {
      get { return receivedSnapshots_; }
      set { receivedSnapshots_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ReceivedJLE != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ReceivedJLE);
      }
      if (ReceivedStartFrame != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ReceivedStartFrame);
      }
      if (ReceivedCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ReceivedCount);
      }
      receivedSnapshots_.WriteTo(output, _repeated_receivedSnapshots_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (ReceivedJLE != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReceivedJLE);
      }
      if (ReceivedStartFrame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReceivedStartFrame);
      }
      if (ReceivedCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReceivedCount);
      }
      size += receivedSnapshots_.CalculateSize(_repeated_receivedSnapshots_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      receivedJLE_ = 0;
      receivedStartFrame_ = 0;
      receivedCount_ = 0;
      receivedSnapshots_.Clear();
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReceivedJLE = input.ReadInt32();
            break;
          }
          case 16: {
            ReceivedStartFrame = input.ReadInt32();
            break;
          }
          case 24: {
            ReceivedCount = input.ReadInt32();
            break;
          }
          case 34: {
            receivedSnapshots_.AddEntriesFrom(input, _repeated_receivedSnapshots_codec);
            break;
          }
        }
      }
    }

  }

  public partial class C2SInputMessage : pb::IMessage {
    private static readonly pb::MessageParser<C2SInputMessage> _parser = new pb::MessageParser<C2SInputMessage>(() => new C2SInputMessage());
    public static pb::MessageParser<C2SInputMessage> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int sequenceChannel_;
    public int SequenceChannel {
      get { return sequenceChannel_; }
      set {
        sequenceChannel_ = value;
      }
    }

    private bool isRLE_;
    public bool IsRLE {
      get { return isRLE_; }
      set {
        isRLE_ = value;
      }
    }

    private int frame_;
    public int Frame {
      get { return frame_; }
      set {
        frame_ = value;
      }
    }

    private global::ETModel.MessageInputRLE inputRLE_;
    public global::ETModel.MessageInputRLE InputRLE {
      get { return inputRLE_; }
      set {
        inputRLE_ = value;
      }
    }

    private global::ETModel.MessageInputCoalesced inputCoalesced_;
    public global::ETModel.MessageInputCoalesced InputCoalesced {
      get { return inputCoalesced_; }
      set {
        inputCoalesced_ = value;
      }
    }

    private global::ETModel.MessageReceiveRemoteNCFAndJLE receiveRemoteNCFAndJLE_;
    public global::ETModel.MessageReceiveRemoteNCFAndJLE ReceiveRemoteNCFAndJLE {
      get { return receiveRemoteNCFAndJLE_; }
      set {
        receiveRemoteNCFAndJLE_ = value;
      }
    }

    private global::ETModel.MessageReceiveDesyncDebug receiveDesyncDebug_;
    public global::ETModel.MessageReceiveDesyncDebug ReceiveDesyncDebug {
      get { return receiveDesyncDebug_; }
      set {
        receiveDesyncDebug_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (SequenceChannel != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SequenceChannel);
      }
      if (IsRLE != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsRLE);
      }
      if (Frame != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Frame);
      }
      if (inputRLE_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(InputRLE);
      }
      if (inputCoalesced_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(InputCoalesced);
      }
      if (receiveRemoteNCFAndJLE_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(ReceiveRemoteNCFAndJLE);
      }
      if (receiveDesyncDebug_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(ReceiveDesyncDebug);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (SequenceChannel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SequenceChannel);
      }
      if (IsRLE != false) {
        size += 1 + 1;
      }
      if (Frame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Frame);
      }
      if (inputRLE_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InputRLE);
      }
      if (inputCoalesced_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InputCoalesced);
      }
      if (receiveRemoteNCFAndJLE_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReceiveRemoteNCFAndJLE);
      }
      if (receiveDesyncDebug_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReceiveDesyncDebug);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      sequenceChannel_ = 0;
      isRLE_ = false;
      frame_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SequenceChannel = input.ReadInt32();
            break;
          }
          case 16: {
            IsRLE = input.ReadBool();
            break;
          }
          case 24: {
            Frame = input.ReadInt32();
            break;
          }
          case 34: {
            if (inputRLE_ == null) {
              inputRLE_ = new global::ETModel.MessageInputRLE();
            }
            input.ReadMessage(inputRLE_);
            break;
          }
          case 42: {
            if (inputCoalesced_ == null) {
              inputCoalesced_ = new global::ETModel.MessageInputCoalesced();
            }
            input.ReadMessage(inputCoalesced_);
            break;
          }
          case 50: {
            if (receiveRemoteNCFAndJLE_ == null) {
              receiveRemoteNCFAndJLE_ = new global::ETModel.MessageReceiveRemoteNCFAndJLE();
            }
            input.ReadMessage(receiveRemoteNCFAndJLE_);
            break;
          }
          case 58: {
            if (receiveDesyncDebug_ == null) {
              receiveDesyncDebug_ = new global::ETModel.MessageReceiveDesyncDebug();
            }
            input.ReadMessage(receiveDesyncDebug_);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class C2SCoalesceInput : pb::IMessage {
    private static readonly pb::MessageParser<C2SCoalesceInput> _parser = new pb::MessageParser<C2SCoalesceInput>(() => new C2SCoalesceInput());
    public static pb::MessageParser<C2SCoalesceInput> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int inputFormat_;
    /// <summary>
    ///0为false 1为true
    /// </summary>
    public int InputFormat {
      get { return inputFormat_; }
      set {
        inputFormat_ = value;
      }
    }

    private int startFrame_;
    public int StartFrame {
      get { return startFrame_; }
      set {
        startFrame_ = value;
      }
    }

    private uint firstInputCount_;
    public uint FirstInputCount {
      get { return firstInputCount_; }
      set {
        firstInputCount_ = value;
      }
    }

    private int firstInputstateValue_;
    public int FirstInputstateValue {
      get { return firstInputstateValue_; }
      set {
        firstInputstateValue_ = value;
      }
    }

    private int lastInputstateValue_;
    public int LastInputstateValue {
      get { return lastInputstateValue_; }
      set {
        lastInputstateValue_ = value;
      }
    }

    private int newestConsistentFrame_;
    public int NewestConsistentFrame {
      get { return newestConsistentFrame_; }
      set {
        newestConsistentFrame_ = value;
      }
    }

    private int latestJoinLeaveEvent_;
    public int LatestJoinLeaveEvent {
      get { return latestJoinLeaveEvent_; }
      set {
        latestJoinLeaveEvent_ = value;
      }
    }

    private uint nCFSnapshot_;
    public uint NCFSnapshot {
      get { return nCFSnapshot_; }
      set {
        nCFSnapshot_ = value;
      }
    }

    private global::ETModel.MessageInputRLE myMessageInputRLE_;
    public global::ETModel.MessageInputRLE MyMessageInputRLE {
      get { return myMessageInputRLE_; }
      set {
        myMessageInputRLE_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (InputFormat != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(InputFormat);
      }
      if (StartFrame != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(StartFrame);
      }
      if (FirstInputCount != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(FirstInputCount);
      }
      if (FirstInputstateValue != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(FirstInputstateValue);
      }
      if (LastInputstateValue != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(LastInputstateValue);
      }
      if (NewestConsistentFrame != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(NewestConsistentFrame);
      }
      if (LatestJoinLeaveEvent != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(LatestJoinLeaveEvent);
      }
      if (NCFSnapshot != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(NCFSnapshot);
      }
      if (myMessageInputRLE_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(MyMessageInputRLE);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (InputFormat != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InputFormat);
      }
      if (StartFrame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StartFrame);
      }
      if (FirstInputCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FirstInputCount);
      }
      if (FirstInputstateValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FirstInputstateValue);
      }
      if (LastInputstateValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LastInputstateValue);
      }
      if (NewestConsistentFrame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NewestConsistentFrame);
      }
      if (LatestJoinLeaveEvent != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LatestJoinLeaveEvent);
      }
      if (NCFSnapshot != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NCFSnapshot);
      }
      if (myMessageInputRLE_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MyMessageInputRLE);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      inputFormat_ = 0;
      startFrame_ = 0;
      firstInputCount_ = 0;
      firstInputstateValue_ = 0;
      lastInputstateValue_ = 0;
      newestConsistentFrame_ = 0;
      latestJoinLeaveEvent_ = 0;
      nCFSnapshot_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            InputFormat = input.ReadInt32();
            break;
          }
          case 16: {
            StartFrame = input.ReadInt32();
            break;
          }
          case 24: {
            FirstInputCount = input.ReadUInt32();
            break;
          }
          case 32: {
            FirstInputstateValue = input.ReadInt32();
            break;
          }
          case 40: {
            LastInputstateValue = input.ReadInt32();
            break;
          }
          case 48: {
            NewestConsistentFrame = input.ReadInt32();
            break;
          }
          case 56: {
            LatestJoinLeaveEvent = input.ReadInt32();
            break;
          }
          case 64: {
            NCFSnapshot = input.ReadUInt32();
            break;
          }
          case 74: {
            if (myMessageInputRLE_ == null) {
              myMessageInputRLE_ = new global::ETModel.MessageInputRLE();
            }
            input.ReadMessage(myMessageInputRLE_);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class S2CCoalesceInput : pb::IMessage {
    private static readonly pb::MessageParser<S2CCoalesceInput> _parser = new pb::MessageParser<S2CCoalesceInput>(() => new S2CCoalesceInput());
    public static pb::MessageParser<S2CCoalesceInput> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private static readonly pb::FieldCodec<int> _repeated_inputFormat_codec
        = pb::FieldCodec.ForInt32(10);
    private pbc::RepeatedField<int> inputFormat_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///0为false 1为true
    /// </summary>
    public pbc::RepeatedField<int> InputFormat {
      get { return inputFormat_; }
      set { inputFormat_ = value; }
    }

    private static readonly pb::FieldCodec<int> _repeated_frame_codec
        = pb::FieldCodec.ForInt32(18);
    private pbc::RepeatedField<int> frame_ = new pbc::RepeatedField<int>();
    public pbc::RepeatedField<int> Frame {
      get { return frame_; }
      set { frame_ = value; }
    }

    private static readonly pb::FieldCodec<global::ETModel.MessageInputRLE> _repeated_myMessageInputRLE_codec
        = pb::FieldCodec.ForMessage(26, global::ETModel.MessageInputRLE.Parser);
    private pbc::RepeatedField<global::ETModel.MessageInputRLE> myMessageInputRLE_ = new pbc::RepeatedField<global::ETModel.MessageInputRLE>();
    public pbc::RepeatedField<global::ETModel.MessageInputRLE> MyMessageInputRLE {
      get { return myMessageInputRLE_; }
      set { myMessageInputRLE_ = value; }
    }

    private static readonly pb::FieldCodec<long> _repeated_unitID_codec
        = pb::FieldCodec.ForInt64(34);
    private pbc::RepeatedField<long> unitID_ = new pbc::RepeatedField<long>();
    public pbc::RepeatedField<long> UnitID {
      get { return unitID_; }
      set { unitID_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      inputFormat_.WriteTo(output, _repeated_inputFormat_codec);
      frame_.WriteTo(output, _repeated_frame_codec);
      myMessageInputRLE_.WriteTo(output, _repeated_myMessageInputRLE_codec);
      unitID_.WriteTo(output, _repeated_unitID_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      size += inputFormat_.CalculateSize(_repeated_inputFormat_codec);
      size += frame_.CalculateSize(_repeated_frame_codec);
      size += myMessageInputRLE_.CalculateSize(_repeated_myMessageInputRLE_codec);
      size += unitID_.CalculateSize(_repeated_unitID_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      inputFormat_.Clear();
      frame_.Clear();
      myMessageInputRLE_.Clear();
      unitID_.Clear();
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            inputFormat_.AddEntriesFrom(input, _repeated_inputFormat_codec);
            break;
          }
          case 18:
          case 16: {
            frame_.AddEntriesFrom(input, _repeated_frame_codec);
            break;
          }
          case 26: {
            myMessageInputRLE_.AddEntriesFrom(input, _repeated_myMessageInputRLE_codec);
            break;
          }
          case 34:
          case 32: {
            unitID_.AddEntriesFrom(input, _repeated_unitID_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
